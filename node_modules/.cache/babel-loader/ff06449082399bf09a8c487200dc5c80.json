{"ast":null,"code":"import _classCallCheck from\"/Volumes/Work/React/draggable-and-resizable-progress-bar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Volumes/Work/React/draggable-and-resizable-progress-bar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Volumes/Work/React/draggable-and-resizable-progress-bar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Volumes/Work/React/draggable-and-resizable-progress-bar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _assertThisInitialized from\"/Volumes/Work/React/draggable-and-resizable-progress-bar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/Volumes/Work/React/draggable-and-resizable-progress-bar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _slicedToArray from\"/Volumes/Work/React/draggable-and-resizable-progress-bar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{Component}from'react';import{DragDropContext,Droppable,Draggable}from'react-beautiful-dnd';import ResizableProgressBar from'../../common/components/ResizableProgressBar';import TimeProgressBar from'../../common/components/TimeProgressBar';import'./index.scss';// a little function to help us with reordering the result\nvar reorder=function reorder(list,startIndex,endIndex){var result=Array.from(list);var _result$splice=result.splice(startIndex,1),_result$splice2=_slicedToArray(_result$splice,1),removed=_result$splice2[0];result.splice(endIndex,0,removed);return result;};var Dashboard=/*#__PURE__*/function(_Component){_inherits(Dashboard,_Component);function Dashboard(props){var _this;_classCallCheck(this,Dashboard);_this=_possibleConstructorReturn(this,_getPrototypeOf(Dashboard).call(this,props));_this.resizeProgressBarFunc=function(index,size){var items=_this.state.items;items[index].width=size.width;_this.setState({items:items});};_this.state={items:[{id:'aaaaa',// TimeProgressBar Props\nstartTime:40,endTime:60,// ResizableProgressBar Props\nwidth:500},{id:'bbbbb',startTime:0,endTime:60,width:0},{id:'ccccc',startTime:40,endTime:200,width:300},{id:'ddddd',startTime:100,endTime:1000,width:150}]};_this.onDragEnd=_this.onDragEnd.bind(_assertThisInitialized(_this));return _this;}_createClass(Dashboard,[{key:\"onDragEnd\",value:function onDragEnd(result){// dropped outside the list\nif(!result.destination){return;}var items=reorder(this.state.items,result.source.index,result.destination.index);this.setState({items:items});}// Normally you would want to split things out into separate components.\n// But in this example everything is just done in one place for simplicity\n},{key:\"render\",value:function render(){var _this2=this;var progressbarInfo={resizeFunc:this.resizeProgressBarFunc};return React.createElement(\"div\",{className:\"dashboard\"},React.createElement(\"div\",{className:\"drag-drop-context\"},React.createElement(DragDropContext,{onDragEnd:this.onDragEnd},React.createElement(Droppable,{droppableId:\"droppable\"},function(provided){return React.createElement(\"div\",Object.assign({},provided.droppableProps,{ref:provided.innerRef}),_this2.state.items.map(function(item,index){return React.createElement(Draggable,{key:item.id,draggableId:item.id,index:index},function(provided){return React.createElement(\"div\",Object.assign({className:\"item-content\",ref:provided.innerRef},provided.draggableProps),React.createElement(\"div\",{className:\"progress-bar-group\"},React.createElement(\"div\",provided.dragHandleProps,React.createElement(TimeProgressBar,{startTime:item.startTime,endTime:item.endTime})),React.createElement(ResizableProgressBar,Object.assign({index:index,width:item.width},progressbarInfo))));});}),provided.placeholder);}))));}}]);return Dashboard;}(Component);export default Dashboard;","map":{"version":3,"sources":["/Volumes/Work/React/draggable-and-resizable-progress-bar/src/views/Dashboard/index.js"],"names":["React","Component","DragDropContext","Droppable","Draggable","ResizableProgressBar","TimeProgressBar","reorder","list","startIndex","endIndex","result","Array","from","splice","removed","Dashboard","props","resizeProgressBarFunc","index","size","items","state","width","setState","id","startTime","endTime","onDragEnd","bind","destination","source","progressbarInfo","resizeFunc","provided","droppableProps","innerRef","map","item","draggableProps","dragHandleProps","placeholder"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\n\nimport ResizableProgressBar from '../../common/components/ResizableProgressBar'\nimport TimeProgressBar from '../../common/components/TimeProgressBar'\n\nimport './index.scss'\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list)\n  const [removed] = result.splice(startIndex, 1)\n  result.splice(endIndex, 0, removed)\n\n  return result\n}\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      items: [\n        {\n          id: 'aaaaa',\n\n          // TimeProgressBar Props\n          startTime: 40,\n          endTime: 60,\n\n          // ResizableProgressBar Props\n          width: 500\n        },\n        {\n          id: 'bbbbb',\n          startTime: 0,\n          endTime: 60,\n          width: 0\n        },\n        {\n          id: 'ccccc',\n          startTime: 40,\n          endTime: 200,\n          width: 300\n        },\n        {\n          id: 'ddddd',\n          startTime: 100,\n          endTime: 1000,\n          width: 150\n        }\n      ]\n    }\n    this.onDragEnd = this.onDragEnd.bind(this)\n  }\n\n  resizeProgressBarFunc = (index, size) => {\n    const { items } = this.state\n\n    items[index].width = size.width\n\n    this.setState({ items })\n  }\n\n  onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return\n    }\n\n    const items = reorder(\n      this.state.items,\n      result.source.index,\n      result.destination.index\n    )\n\n    this.setState({\n      items\n    })\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    const progressbarInfo = {\n      resizeFunc: this.resizeProgressBarFunc\n    }\n\n    return (\n      <div className='dashboard'>\n        <div className='drag-drop-context'>\n          <DragDropContext onDragEnd={this.onDragEnd}>\n            <Droppable droppableId='droppable'>\n              {(provided) => (\n                <div\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                >\n                  {this.state.items.map((item, index) => (\n                    <Draggable key={item.id} draggableId={item.id} index={index}>\n                      {(provided) => (\n                        <div\n                          className='item-content'\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                        >\n                          <div className='progress-bar-group'>\n                            <div {...provided.dragHandleProps}>\n                              <TimeProgressBar startTime={item.startTime} endTime={item.endTime} />\n                            </div>\n                            <ResizableProgressBar index={index} width={item.width} {...progressbarInfo} />\n                          </div>\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Dashboard\n"]},"metadata":{},"sourceType":"module"}