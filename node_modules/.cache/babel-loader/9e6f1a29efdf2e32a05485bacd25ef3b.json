{"ast":null,"code":"import _slicedToArray from \"/Volumes/Work/React/draggable-and-resizable-progress-bar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Volumes/Work/React/draggable-and-resizable-progress-bar/src/views/Dashboard/index.js\";\nimport React, { Component } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport ResizableProgressBar from '../../common/components/ResizableProgressBar';\nimport TimeProgressBar from '../../common/components/TimeProgressBar';\nimport './index.scss'; // a little function to help us with reordering the result\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n\n  const _result$splice = result.splice(startIndex, 1),\n        _result$splice2 = _slicedToArray(_result$splice, 1),\n        removed = _result$splice2[0];\n\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.resizeProgressBarFunc = (index, size) => {\n      const items = this.state.items;\n      items[index].width = size.width;\n      this.setState({\n        items\n      });\n    };\n\n    this.state = {\n      items: [{\n        id: 'aaaaa',\n        // TimeProgressBar Props\n        startTime: 55,\n        endTime: 60,\n        // ResizableProgressBar Props\n        width: 500\n      }, {\n        id: 'bbbbb',\n        startTime: 0,\n        endTime: 60,\n        width: 0\n      }, {\n        id: 'ccccc',\n        startTime: 40,\n        endTime: 200,\n        width: 300\n      }, {\n        id: 'ddddd',\n        startTime: 100,\n        endTime: 1000,\n        width: 300\n      }]\n    };\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n  onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(this.state.items, result.source.index, result.destination.index);\n    this.setState({\n      items\n    });\n  } // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n\n\n  render() {\n    const progressbarInfo = {\n      resizeFunc: this.resizeProgressBarFunc\n    };\n    return React.createElement(\"div\", {\n      className: \"dashboard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"drag-drop-context\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(Droppable, {\n      droppableId: \"droppable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, provided => React.createElement(\"div\", Object.assign({}, provided.droppableProps, {\n      ref: provided.innerRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), this.state.items.map((item, index) => React.createElement(Draggable, {\n      key: item.name,\n      draggableId: item.name,\n      index: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, provided => React.createElement(\"div\", Object.assign({\n      className: \"item-content\",\n      ref: provided.innerRef\n    }, provided.draggableProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"progress-bar-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"div\", Object.assign({}, provided.dragHandleProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(TimeProgressBar, {\n      startTime: item.startTime,\n      endTime: item.endTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })), React.createElement(ResizableProgressBar, Object.assign({\n      index: index,\n      name: item.name,\n      width: item.width\n    }, progressbarInfo, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    })))))), provided.placeholder)))));\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/Volumes/Work/React/draggable-and-resizable-progress-bar/src/views/Dashboard/index.js"],"names":["React","Component","DragDropContext","Droppable","Draggable","ResizableProgressBar","TimeProgressBar","reorder","list","startIndex","endIndex","result","Array","from","splice","removed","Dashboard","constructor","props","resizeProgressBarFunc","index","size","items","state","width","setState","id","startTime","endTime","onDragEnd","bind","destination","source","render","progressbarInfo","resizeFunc","provided","droppableProps","innerRef","map","item","name","draggableProps","dragHandleProps","placeholder"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\n\nimport ResizableProgressBar from '../../common/components/ResizableProgressBar'\nimport TimeProgressBar from '../../common/components/TimeProgressBar'\n\nimport './index.scss'\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list)\n  const [removed] = result.splice(startIndex, 1)\n  result.splice(endIndex, 0, removed)\n\n  return result\n}\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      items: [\n        {\n          id: 'aaaaa',\n\n          // TimeProgressBar Props\n          startTime: 55,\n          endTime: 60,\n\n          // ResizableProgressBar Props\n          width: 500\n        },\n        {\n          id: 'bbbbb',\n          startTime: 0,\n          endTime: 60,\n          width: 0\n        },\n        {\n          id: 'ccccc',\n          startTime: 40,\n          endTime: 200,\n          width: 300\n        },\n        {\n          id: 'ddddd',\n          startTime: 100,\n          endTime: 1000,\n          width: 300\n        }\n      ]\n    }\n    this.onDragEnd = this.onDragEnd.bind(this)\n  }\n\n  resizeProgressBarFunc = (index, size) => {\n    const { items } = this.state\n\n    items[index].width = size.width\n\n    this.setState({ items })\n  }\n\n  onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return\n    }\n\n    const items = reorder(\n      this.state.items,\n      result.source.index,\n      result.destination.index\n    )\n\n    this.setState({\n      items\n    })\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    const progressbarInfo = {\n      resizeFunc: this.resizeProgressBarFunc\n    }\n\n    return (\n      <div className='dashboard'>\n        <div className='drag-drop-context'>\n          <DragDropContext onDragEnd={this.onDragEnd}>\n            <Droppable droppableId='droppable'>\n              {(provided) => (\n                <div\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                >\n                  {this.state.items.map((item, index) => (\n                    <Draggable key={item.name} draggableId={item.name} index={index}>\n                      {(provided) => (\n                        <div\n                          className='item-content'\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                        >\n                          <div className='progress-bar-group'>\n                            <div {...provided.dragHandleProps}>\n                              <TimeProgressBar startTime={item.startTime} endTime={item.endTime} />\n                            </div>\n                            <ResizableProgressBar index={index} name={item.name} width={item.width} {...progressbarInfo} />\n                          </div>\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Dashboard\n"]},"metadata":{},"sourceType":"module"}