{"version":3,"sources":["common/components/ResizableProgressBar/index.js","common/components/TimeProgressBar/index.js","views/Dashboard/index.js","views/App.js","serviceWorker.js","index.js"],"names":["ResizableProgressBar","props","resize","e","data","resizeFunc","index","size","state","maxWidth","resizableInfo","width","height","axis","handle","className","minConstraints","Infinity","maxConstraints","onResize","this","Number","toFixed","Component","TimeProgressBar","intervalTimeFunc","curTime","endTime","clearInterval","timer","setState","clearTimer","stepTime","startTime","setInterval","curPercent","style","Dashboard","resizeProgressBarFunc","items","id","onDragEnd","bind","result","destination","list","startIndex","endIndex","Array","from","splice","removed","reorder","source","progressbarInfo","droppableId","provided","droppableProps","ref","innerRef","map","item","key","draggableId","draggableProps","dragHandleProps","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e1dc41db.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { ResizableBox } from 'react-resizable'\n\nimport './style.scss'\n\nclass ResizableProgressBar extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      maxWidth: 800,\n      resizableInfo: {\n        width: 300,\n        height: 20,\n        axis: 'x',\n        handle: (<strong className='resize-handler'></strong>),\n        minConstraints: [0, Infinity],\n        maxConstraints: [800, Infinity],\n        onResize: this.resize\n      }\n    }\n  }\n\n  resize = (e, data) => {\n    const { resizeFunc } = this.props\n    const { index } = this.props\n\n    resizeFunc(index, data.size)\n  }\n\n  render() {\n    const { resizableInfo, maxWidth } = this.state\n    const { width } = this.props\n\n    resizableInfo.width = width\n\n    return (\n      <div className='resizable-progress-bar'>\n        <div className='progress-bar-content'>\n          <ResizableBox className='resizable-bar' {...resizableInfo} />\n        </div>\n        <div className='percent-value'>{Number(width / maxWidth * 100).toFixed(2)} %</div>\n      </div>\n    )\n  }\n}\n\nResizableProgressBar.propTypes = {\n  index: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired\n}\n\nexport default ResizableProgressBar\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport './style.scss'\n\nclass TimeProgressBar extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      stepTime: 0,\n      curTime: 0\n    }\n  }\n\n  componentDidMount() {\n    const { endTime, startTime } = this.props\n    this.setState({ stepTime: endTime / 100, curTime: startTime })\n\n    this.timer = setInterval(this.intervalTimeFunc, 1000)\n  }\n\n  intervalTimeFunc = () => {\n    let { curTime } = this.state\n    const { endTime } = this.props\n\n    curTime ++\n\n    if (curTime === endTime) {\n      clearInterval(this.timer)\n    }\n\n    this.setState({ curTime })\n  }\n\n  clearTimer = () => {\n    clearInterval()\n  }\n\n  render() {\n    const { stepTime, curTime } = this.state\n\n    const curPercent = curTime / stepTime\n\n    return (\n      <div className='time-progress-bar'>\n        <div className='progress-bar-content'>\n          <div className='fill-content' style={{ width: `${curPercent}%`}}></div>\n        </div>\n        <div className='percent-value'>{Number(curPercent).toFixed(2)} %</div>\n      </div>\n    )\n  }\n}\n\nTimeProgressBar.propTypes = {\n  startTime: PropTypes.number.isRequired,\n  endTime: PropTypes.number.isRequired\n}\n\nexport default TimeProgressBar","import React, { Component } from 'react'\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\n\nimport ResizableProgressBar from '../../common/components/ResizableProgressBar'\nimport TimeProgressBar from '../../common/components/TimeProgressBar'\n\nimport './index.scss'\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list)\n  const [removed] = result.splice(startIndex, 1)\n  result.splice(endIndex, 0, removed)\n\n  return result\n}\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      items: [\n        {\n          id: 'aaaaa',\n\n          // TimeProgressBar Props\n          startTime: 40,\n          endTime: 60,\n\n          // ResizableProgressBar Props\n          width: 500\n        },\n        {\n          id: 'bbbbb',\n          startTime: 0,\n          endTime: 60,\n          width: 0\n        },\n        {\n          id: 'ccccc',\n          startTime: 40,\n          endTime: 200,\n          width: 300\n        },\n        {\n          id: 'ddddd',\n          startTime: 100,\n          endTime: 1000,\n          width: 150\n        }\n      ]\n    }\n    this.onDragEnd = this.onDragEnd.bind(this)\n  }\n\n  resizeProgressBarFunc = (index, size) => {\n    const { items } = this.state\n\n    items[index].width = size.width\n\n    this.setState({ items })\n  }\n\n  onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return\n    }\n\n    const items = reorder(\n      this.state.items,\n      result.source.index,\n      result.destination.index\n    )\n\n    this.setState({\n      items\n    })\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    const progressbarInfo = {\n      resizeFunc: this.resizeProgressBarFunc\n    }\n\n    return (\n      <div className='dashboard'>\n        <div className='drag-drop-context'>\n          <DragDropContext onDragEnd={this.onDragEnd}>\n            <Droppable droppableId='droppable'>\n              {(provided) => (\n                <div\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                >\n                  {this.state.items.map((item, index) => (\n                    <Draggable key={item.id} draggableId={item.id} index={index}>\n                      {(provided) => (\n                        <div\n                          className='item-content'\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                        >\n                          <div className='progress-bar-group'>\n                            <div {...provided.dragHandleProps}>\n                              <TimeProgressBar startTime={item.startTime} endTime={item.endTime} />\n                            </div>\n                            <ResizableProgressBar index={index} width={item.width} {...progressbarInfo} />\n                          </div>\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Dashboard\n","import React, { Component } from 'react'\n\nimport Dashboard from './Dashboard'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='app'>\n        <Dashboard />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './views/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}